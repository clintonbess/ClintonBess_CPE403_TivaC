#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/sysctl.h"
#include "driverlib/adc.h"
#include "driverlib/gpio.h"
#define TARGET_IS_BLIZZARD_RB1 // Symbol to access the API's in ROM.
#include "driverlib/rom.h"
#ifdef DEBUG
void__error__(char *pcFilename,	uint32_t u132lLine)
{
}
#endif
int main(void) {

	uint32_t ui32ADC0Value[4];
	volatile uint32_t ui32TempAvg;
	volatile uint32_t ui32TempValueC;
	volatile uint32_t ui32TempValueF;

	ROM_SysCtlClockSet(
	SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);

	ROM_ADCHardwareOversampleConfigure(ADC0_BASE, 64);
	ROM_ADCSequenceConfigure(ADC0_BASE, 2, ADC_TRIGGER_PROCESSOR, 0);
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 0, ADC_CTL_TS);
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 1, ADC_CTL_TS);
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 2, ADC_CTL_TS);
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 3,
	ADC_CTL_TS | ADC_CTL_IE | ADC_CTL_END);
	ROM_ADCSequenceEnable(ADC0_BASE, 2);
	while (1) {
		ROM_ADCIntClear(ADC0_BASE, 2);
		ROM_ADCProcessorTrigger(ADC0_BASE, 2);
		while (!ROM_ADCIntStatus(ADC0_BASE, 2, false)) {
		}
		ADCSequenceDataGet(ADC0_BASE, 2, ui32ADC0Value);
		ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2]
				+ ui32ADC0Value[3] + 2) / 4;
		ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096) / 10;
		ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;

		if (ui32TempValueF > 64) {
			ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 2);
		} else {
			ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, 0);
		}

	}
}
